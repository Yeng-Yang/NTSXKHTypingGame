// File: script.js
// ‡∫Ñ‡∫ß‡∫ö‡∫Ñ‡∫∏‡∫°‡ªú‡ªâ‡∫≤‡∫™‡∫≠‡∫ö‡ªÄ‡∫™‡∫±‡∫á‡∫Ç‡∫≠‡∫á‡∫ô‡∫±‡∫Å‡∫Æ‡∫Ω‡∫ô

const quizForm = document.getElementById('quiz-form');
const submitBtn = document.getElementById('submit-btn');
const resultContainer = document.getElementById('result-container');
const quizTimerDiv = document.getElementById('quiz-timer');
const quizContainer = document.querySelector('.quiz-container');
const quizProgressDiv = document.getElementById('quiz-progress');
const prevBtn = document.getElementById('prev-btn');
const nextBtn = document.getElementById('next-btn');
const navigationContainer = document.getElementById('navigation-container');

let questions = [];
let currentQuestionIndex = 0;
let userAnswers = {}; // ‡ªÄ‡∫Å‡∫±‡∫ö‡∫Ñ‡∫≥‡∫ï‡∫≠‡∫ö‡∫ä‡∫ª‡ªà‡∫ß‡∫Ñ‡∫≤‡∫ß
let quizStarted = false;

let timerInterval;
let currentSessionId = null;
let lastKnownStatus = null; // ‡ªÄ‡∫û‡∫µ‡ªà‡∫°‡∫ï‡∫ª‡∫ß‡ªÅ‡∫õ‡ªÄ‡∫û‡∫∑‡ªà‡∫≠‡ªÄ‡∫Å‡∫±‡∫ö‡∫™‡∫∞‡∫ñ‡∫≤‡∫ô‡∫∞‡∫´‡∫º‡ªâ‡∫≤‡∫™‡∫∏‡∫î
const celebrationSound = new Audio('https://cdn.pixabay.com/audio/2022/03/15/audio_16a892c10a.mp3'); // ‡∫™‡∫Ω‡∫á Tada Fanfare

// ‡∫Å‡∫ß‡∫î‡∫™‡∫≠‡∫ö‡∫ß‡ªà‡∫≤‡ªÑ‡∫î‡ªâ‡∫•‡∫±‡∫≠‡∫Å‡∫≠‡∫¥‡∫ô‡ªÄ‡∫Ç‡∫ª‡ªâ‡∫≤‡∫°‡∫≤‡ªÅ‡∫•‡ªâ‡∫ß ‡∫´‡∫º‡∫∑ ‡∫ö‡ªç‡ªà
const studentId = sessionStorage.getItem('current_student_id');
if (!studentId) {
    alert('‡∫Å‡∫∞‡∫•‡∫∏‡∫ô‡∫≤‡ªÄ‡∫Ç‡∫ª‡ªâ‡∫≤‡∫™‡∫π‡ªà‡∫•‡∫∞‡∫ö‡∫ª‡∫ö‡∫Å‡ªà‡∫≠‡∫ô!');
    window.location.replace('login.html');
}

/**
 * ‡∫ü‡∫±‡∫á‡∫ä‡∫±‡∫ô‡∫ö‡∫±‡∫á‡∫Ñ‡∫±‡∫ö‡∫≠‡∫≠‡∫Å‡∫à‡∫≤‡∫Å‡∫•‡∫∞‡∫ö‡∫ª‡∫ö
 */
function forceLogout() {
    clearInterval(timerInterval); // ‡∫¢‡∫∏‡∫î‡∫Å‡∫≤‡∫ô‡∫ô‡∫±‡∫ö‡ªÄ‡∫ß‡∫•‡∫≤‡∫ó‡∫±‡∫ô‡∫ó‡∫µ
    Swal.fire({
        title: '‡∫´‡ªâ‡∫≠‡∫á‡∫™‡∫≠‡∫ö‡ªÄ‡∫™‡∫±‡∫á‡∫õ‡∫¥‡∫î‡ªÅ‡∫•‡ªâ‡∫ß',
        text: '‡∫•‡∫∞‡∫ö‡∫ª‡∫ö‡ªÑ‡∫î‡ªâ‡∫õ‡∫¥‡∫î‡∫Å‡∫≤‡∫ô‡∫™‡∫≠‡∫ö‡ªÄ‡∫™‡∫±‡∫á‡∫¢‡ªà‡∫≤‡∫á‡∫™‡∫ª‡∫°‡∫ö‡∫π‡∫ô. ‡∫Å‡ªç‡∫≤‡∫•‡∫±‡∫á‡∫≠‡∫≠‡∫Å‡∫à‡∫≤‡∫Å‡∫•‡∫∞‡∫ö‡∫ª‡∫ö...',
        icon: 'info',
        timer: 3000,
        showConfirmButton: false,
        allowOutsideClick: false
    }).then(() => {
        sessionStorage.clear();
        window.location.replace('login.html');
    });
}

/**
 * ‡∫™‡∫∞‡ªÅ‡∫î‡∫á‡ªú‡ªâ‡∫≤‡∫•‡ªç‡∫ñ‡ªâ‡∫≤
 */
function showWaitingRoom() {
    quizForm.innerHTML = `
        <div style="text-align: center; padding: 50px 0;">
            <h2>‚è≥ ‡∫Å‡∫∞‡∫•‡∫∏‡∫ô‡∫≤‡∫•‡ªç‡∫ñ‡ªâ‡∫≤...</h2>
            <p>‡∫≠‡∫≤‡∫à‡∫≤‡∫ô‡∫Å‡∫≥‡∫•‡∫±‡∫á‡∫à‡∫∞‡ªÄ‡∫•‡∫µ‡ªà‡∫°‡∫Å‡∫≤‡∫ô‡∫™‡∫≠‡∫ö‡ªÄ‡∫™‡∫±‡∫á‡ªÉ‡∫ô‡ªÑ‡∫ß‡ªÜ‡∫ô‡∫µ‡ªâ.</p>
        </div>
    `;
    submitBtn.style.display = 'none';
    quizTimerDiv.style.display = 'none';
    navigationContainer.style.display = 'none';
}

/**
 * ‡∫™‡∫∞‡ªÅ‡∫î‡∫á‡ªú‡ªâ‡∫≤‡∫™‡∫≠‡∫ö‡ªÄ‡∫™‡∫±‡∫á‡∫õ‡∫¥‡∫î
 */
function showExamClosed() {
    quizForm.innerHTML = `
        <div style="text-align: center; padding: 50px 0;">
            <h2>üõë ‡∫Å‡∫≤‡∫ô‡∫™‡∫≠‡∫ö‡ªÄ‡∫™‡∫±‡∫á‡ªÑ‡∫î‡ªâ‡∫õ‡∫¥‡∫î‡∫•‡∫ª‡∫á‡ªÅ‡∫•‡ªâ‡∫ß</h2>
            <p>‡∫Å‡∫≥‡∫•‡∫±‡∫á‡∫û‡∫≤‡∫ó‡ªà‡∫≤‡∫ô‡ªÑ‡∫õ‡ªú‡ªâ‡∫≤‡∫™‡∫∞‡ªÅ‡∫î‡∫á‡∫ú‡∫ª‡∫ô‡∫Ñ‡∫∞‡ªÅ‡∫ô‡∫ô...</p>
        </div>
    `;
    submitBtn.style.display = 'none';
    quizTimerDiv.style.display = 'none';
    navigationContainer.style.display = 'none';
    setTimeout(() => {
        window.location.href = 'final_results.html';
    }, 3000);
}

/**
 * ‡∫™‡ªâ‡∫≤‡∫á‡∫ü‡∫±‡∫á‡∫ä‡∫±‡∫ô‡ªÉ‡∫ô‡∫ñ‡∫≤‡∫ô‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô‡ªÄ‡∫û‡∫∑‡ªà‡∫≠‡∫î‡∫∂‡∫á‡ªÄ‡∫ß‡∫•‡∫≤ Server
 * ‡∫ó‡ªà‡∫≤‡∫ô‡∫ï‡ªâ‡∫≠‡∫á RUN ‡∫Ñ‡∫≥‡∫™‡∫±‡ªà‡∫á SQL ‡∫ô‡∫µ‡ªâ‡ªÉ‡∫ô Supabase SQL Editor ‡∫û‡∫Ω‡∫á‡∫Ñ‡∫±‡ªâ‡∫á‡∫î‡∫Ω‡∫ß:
 * CREATE OR REPLACE FUNCTION get_server_time()
 * RETURNS timestamptz AS $$
 *   SELECT now();
 * $$ LANGUAGE sql;
 */

/**
 * ‡ªÇ‡∫´‡∫º‡∫î‡∫Ñ‡∫≥‡∫ñ‡∫≤‡∫° ‡ªÅ‡∫•‡∫∞ ‡ªÄ‡∫•‡∫µ‡ªà‡∫°‡∫Å‡∫≤‡∫ô‡∫™‡∫≠‡∫ö‡ªÄ‡∫™‡∫±‡∫á
 */
async function startQuiz(targetClassLevel) {
    if (!targetClassLevel) {
        console.error("Target class level is required to start the quiz.");
        quizForm.innerHTML = '<p style="color: red;">‡∫ö‡ªç‡ªà‡∫™‡∫≤‡∫°‡∫≤‡∫î‡∫Å‡∫≥‡∫ô‡∫ª‡∫î‡∫ä‡∫±‡ªâ‡∫ô‡∫Æ‡∫Ω‡∫ô‡∫Ç‡∫≠‡∫á‡∫´‡ªâ‡∫≠‡∫á‡∫™‡∫≠‡∫ö‡ªÄ‡∫™‡∫±‡∫á‡ªÑ‡∫î‡ªâ.</p>';
        return;
    }

    quizStarted = true;
    quizTimerDiv.style.display = 'block';
    navigationContainer.style.display = 'flex';

    // ‡∫õ‡∫±‡∫ö‡∫õ‡∫∏‡∫á: ‡∫î‡∫∂‡∫á‡∫Ñ‡∫≥‡∫ñ‡∫≤‡∫°‡∫™‡∫∞‡ªÄ‡∫û‡∫≤‡∫∞‡∫ä‡∫±‡ªâ‡∫ô‡∫Æ‡∫Ω‡∫ô‡∫ó‡∫µ‡ªà‡∫Å‡∫≥‡∫ô‡∫ª‡∫î
    const { data, error } = await supabase_client
        .from('questions')
        .select('*')
        .eq('class_level', targetClassLevel) // ‡ªÄ‡∫û‡∫µ‡ªà‡∫°‡∫Å‡∫≤‡∫ô‡∫Å‡∫±‡ªà‡∫ô‡∫ï‡∫≠‡∫á‡∫ï‡∫≤‡∫°‡∫ä‡∫±‡ªâ‡∫ô‡∫Æ‡∫Ω‡∫ô
        .order('created_at', { ascending: true });

    if (error) {
        quizForm.innerHTML = '<p style="color: red;">‡ªÄ‡∫Å‡∫µ‡∫î‡∫Ç‡ªç‡ªâ‡∫ú‡∫¥‡∫î‡∫û‡∫≤‡∫î‡ªÉ‡∫ô‡∫Å‡∫≤‡∫ô‡ªÇ‡∫´‡∫º‡∫î‡∫Ñ‡∫≥‡∫ñ‡∫≤‡∫°.</p>';
        return;
    }
    questions = data;
    renderCurrentQuestion();
}

/**
 * ‡∫™‡∫∞‡ªÅ‡∫î‡∫á‡∫Ñ‡∫≥‡∫ñ‡∫≤‡∫°‡∫õ‡∫±‡∫î‡∫à‡∫∏‡∫ö‡∫±‡∫ô
 */
function renderCurrentQuestion() {
    if (questions.length === 0) return;

    quizForm.innerHTML = '';
    quizProgressDiv.textContent = `‡∫Ñ‡∫≥‡∫ñ‡∫≤‡∫°‡∫ó‡∫µ ${currentQuestionIndex + 1} / ${questions.length}`;

    const q = questions[currentQuestionIndex];
    const questionBlock = document.createElement('div');
    questionBlock.className = 'question-block';
    questionBlock.id = `question-${q.id}`; // ‡ªÉ‡∫ä‡ªâ ID ‡∫Ç‡∫≠‡∫á‡∫Ñ‡∫≥‡∫ñ‡∫≤‡∫°

    let content = `<div class="question-text">${currentQuestionIndex + 1}. ${q.question}</div>`;
    if (q.image_url) {
        content += `<img src="${q.image_url}" alt="Question Image" class="question-image">`;
    }

    // ‡∫™‡ªâ‡∫≤‡∫á HTML ‡∫ï‡∫≤‡∫°‡∫õ‡∫∞‡ªÄ‡∫û‡∫î‡∫Ñ‡∫≥‡∫ñ‡∫≤‡∫°
    switch (q.type) {
        case 'multiple-choice':
        case 'image-multiple-choice':
            content += '<div class="options-container">';
            q.options.forEach(option => {
                const isChecked = userAnswers[q.id] === option ? 'checked' : '';
                content += `<label><input type="radio" name="q${q.id}" value="${option}" ${isChecked}> ${option}</label>`;
            });
            content += '</div>';
            break;
        case 'fill-in':
        case 'image-fill-in':
            const savedAnswer = userAnswers[q.id] || '';
            content += `<input type="text" name="q${q.id}" class="fill-in-input" placeholder="‡∫õ‡ªâ‡∫≠‡∫ô‡∫Ñ‡∫≥‡∫ï‡∫≠‡∫ö..." value="${savedAnswer}">`;
            break;

        case 'drag-fill-in':
            const correctAnswers = q.answer || [];
            const distractors = q.options || [];
            const wordBankItems = [...correctAnswers, ...distractors].sort(() => Math.random() - 0.5);

            let wordBankHTML = '<div class="word-bank">';
            wordBankItems.forEach((word) => {
                wordBankHTML += `<div class="draggable-word" draggable="true">${word}</div>`;
            });
            wordBankHTML += '</div>';

            let blankIndex = 0;
            const questionWithBlanks = q.question.replace(/__BLANK__/g, () => {
                const savedWord = userAnswers[q.id] ? (userAnswers[q.id][blankIndex] || '') : '';
                blankIndex++;
                return `<span class="drop-zone" data-blank-index="${blankIndex - 1}">${savedWord}</span>`;
            });

            content += `<div class="drag-fill-container">${questionWithBlanks}</div>${wordBankHTML}`;
            break;

        case 'matching-text-text':
        case 'matching-text-image':
            const terms = q.pairs.map(p => p.term);
            const matches = q.pairs.map(p => p.match).sort(() => Math.random() - 0.5);

            let matchingHTML = '<div class="matching-container">';
            matchingHTML += '<div class="matching-column">'; // Left column
            terms.forEach((term, index) => {
                const savedMatch = userAnswers[q.id] ? (userAnswers[q.id][index] || null) : null;
                let dropZoneContent = '';
                if (savedMatch) {
                    const content = q.type === 'matching-text-image' ? `<img src="${savedMatch}" alt="match">` : savedMatch;
                    dropZoneContent = `<div class="match-item" draggable="true" data-match-content="${savedMatch}">${content}</div>`;
                }
                matchingHTML += `<div class="matching-row"><div class="term-item matching-item">${term}</div><div class="matching-drop-zone" data-term-index="${index}">${dropZoneContent}</div></div>`;
            });
            matchingHTML += '</div>';

            matchingHTML += '<div class="matching-column" id="match-source-pool">'; // Right column
            matches.forEach(match => {
                const isUsed = userAnswers[q.id] ? Object.values(userAnswers[q.id]).includes(match) : false;
                if (!isUsed) {
                    const content = q.type === 'matching-text-image' ? `<img src="${match}" alt="match">` : match;
                    matchingHTML += `<div class="match-item" draggable="true" data-match-content="${match}">${content}</div>`;
                }
            });
            matchingHTML += '</div></div>';
            content += matchingHTML;
            break;
    }
    questionBlock.innerHTML = content;
    quizForm.appendChild(questionBlock);

    initializeDragAndDrop();
    updateNavigationButtons();
}

function updateNavigationButtons() {
    prevBtn.disabled = currentQuestionIndex === 0;
    nextBtn.style.display = currentQuestionIndex < questions.length - 1 ? 'block' : 'none';
    submitBtn.style.display = currentQuestionIndex === questions.length - 1 ? 'block' : 'none';
}

/**
 * ‡ªÄ‡∫•‡∫µ‡ªà‡∫°‡∫ô‡∫±‡∫ö‡ªÄ‡∫ß‡∫•‡∫≤‡∫ñ‡∫≠‡∫ç‡∫´‡∫º‡∫±‡∫á
 * @param {string} endTimeISO - ‡ªÄ‡∫ß‡∫•‡∫≤‡∫™‡∫¥‡ªâ‡∫ô‡∫™‡∫∏‡∫î‡ªÉ‡∫ô‡∫Æ‡∫π‡∫ö‡ªÅ‡∫ö‡∫ö ISO string
 */
function runTimer(endTime, startTime) {
    let distance = endTime - startTime;

    timerInterval = setInterval(() => {
        const now = new Date().getTime();
        const distance = endTime - now;

        if (distance < 0) {
            clearInterval(timerInterval);
            quizTimerDiv.textContent = "‡ªù‡∫ª‡∫î‡ªÄ‡∫ß‡∫•‡∫≤!";
            quizTimerDiv.style.backgroundColor = '#dc3545'; // ‡∫õ‡ªà‡∫Ω‡∫ô‡ªÄ‡∫õ‡∫±‡∫ô‡∫™‡∫µ‡ªÅ‡∫î‡∫á

            // ‡ªÄ‡∫û‡∫µ‡ªà‡∫° Style ‡∫•‡∫∞‡ªÄ‡∫ö‡∫µ‡∫î‡ªÅ‡∫ï‡∫Å ‡ªÅ‡∫•‡∫∞ ‡∫™‡∫Ω‡∫á
            celebrationSound.play();
            confetti({
                particleCount: 200,
                spread: 180,
                origin: { y: 0.6 }
            });

            // ‡∫™‡∫∞‡ªÅ‡∫î‡∫á‡∫Ç‡ªç‡ªâ‡∫Ñ‡∫ß‡∫≤‡∫°‡∫ß‡ªà‡∫≤‡∫Å‡∫≥‡∫•‡∫±‡∫á‡∫™‡∫ª‡ªà‡∫á
            Swal.fire({
                title: '‡ªù‡∫ª‡∫î‡ªÄ‡∫ß‡∫•‡∫≤!',
                text: '‡∫Å‡∫≥‡∫•‡∫±‡∫á‡∫™‡∫ª‡ªà‡∫á‡∫Ñ‡∫≥‡∫ï‡∫≠‡∫ö‡∫Ç‡∫≠‡∫á‡∫ó‡ªà‡∫≤‡∫ô‡ªÇ‡∫î‡∫ç‡∫≠‡∫±‡∫î‡∫ï‡∫∞‡ªÇ‡∫ô‡∫°‡∫±‡∫î...',
                icon: 'warning',
                allowOutsideClick: false,
                showConfirmButton: false,
                timer: 3000 // ‡∫™‡∫∞‡ªÅ‡∫î‡∫á‡∫Ñ‡ªâ‡∫≤‡∫á‡ªÑ‡∫ß‡ªâ 3 ‡∫ß‡∫¥‡∫ô‡∫≤‡∫ó‡∫µ
            });

            submitQuiz(true); // ‡∫ö‡∫±‡∫á‡∫Ñ‡∫±‡∫ö‡∫™‡∫ª‡ªà‡∫á‡ªÄ‡∫°‡∫∑‡ªà‡∫≠‡ªù‡∫ª‡∫î‡ªÄ‡∫ß‡∫•‡∫≤
            return;
        }

        const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
        const seconds = Math.floor((distance % (1000 * 60)) / 1000);

        quizTimerDiv.textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
    }, 1000);
}

/**
 * ‡ªÄ‡∫•‡∫µ‡ªà‡∫°‡∫ô‡∫±‡∫ö‡ªÄ‡∫ß‡∫•‡∫≤‡∫ñ‡∫≠‡∫ç‡∫´‡∫º‡∫±‡∫á
 * @param {string} adminEndTimeISO - ‡ªÄ‡∫ß‡∫•‡∫≤‡∫™‡∫¥‡ªâ‡∫ô‡∫™‡∫∏‡∫î‡∫ó‡∫µ‡ªà‡∫Å‡∫≥‡∫ô‡∫ª‡∫î‡ªÇ‡∫î‡∫ç‡∫≠‡∫≤‡∫à‡∫≤‡∫ô‡ªÉ‡∫ô‡∫Æ‡∫π‡∫ö‡ªÅ‡∫ö‡∫ö ISO string
 */
async function startTimer(endTimeISO) {
    if (timerInterval) clearInterval(timerInterval);

    const adminEndTime = new Date(endTimeISO).getTime();

    // ‡∫î‡∫∂‡∫á‡ªÄ‡∫ß‡∫•‡∫≤‡∫õ‡∫±‡∫î‡∫à‡∫∏‡∫ö‡∫±‡∫ô‡∫à‡∫≤‡∫Å Server ‡ªÄ‡∫û‡∫∑‡ªà‡∫≠‡∫Ñ‡∫ß‡∫≤‡∫°‡∫ñ‡∫∑‡∫Å‡∫ï‡ªâ‡∫≠‡∫á
    const { data: serverTimeData, error: serverTimeError } = await supabase_client.rpc('get_server_time');
    let currentTime;
    if (serverTimeError || !serverTimeData) {
        console.error("Could not fetch server time, falling back to local time.");
        // Fallback to local time if server time is unavailable
        currentTime = new Date().getTime();
    } else {
        currentTime = new Date(serverTimeData).getTime();
    }

    // ‡∫Å‡∫≥‡∫ô‡∫ª‡∫î‡ªÄ‡∫ß‡∫•‡∫≤‡∫™‡∫π‡∫á‡∫™‡∫∏‡∫î 45 ‡∫ô‡∫≤‡∫ó‡∫µ (2700000 ‡∫°‡∫¥‡∫ô‡∫•‡∫¥‡∫ß‡∫¥‡∫ô‡∫≤‡∫ó‡∫µ) ‡∫à‡∫≤‡∫Å‡ªÄ‡∫ß‡∫•‡∫≤‡∫õ‡∫±‡∫î‡∫à‡∫∏‡∫ö‡∫±‡∫ô‡∫ó‡∫µ‡ªà‡∫ô‡∫±‡∫Å‡∫Æ‡∫Ω‡∫ô‡ªÄ‡∫•‡∫µ‡ªà‡∫°
    const fixedDurationMs = 45 * 60 * 1000;
    const clientCalculatedEndTime = currentTime + fixedDurationMs;

    // ‡ªÄ‡∫ß‡∫•‡∫≤‡∫™‡∫¥‡ªâ‡∫ô‡∫™‡∫∏‡∫î‡∫ó‡∫µ‡ªà‡∫°‡∫µ‡∫ú‡∫ª‡∫ô‡∫ö‡∫±‡∫á‡∫Ñ‡∫±‡∫ö‡ªÉ‡∫ä‡ªâ‡ªÅ‡∫°‡ªà‡∫ô‡ªÄ‡∫ß‡∫•‡∫≤‡∫ó‡∫µ‡ªà‡∫™‡∫±‡ªâ‡∫ô‡∫ó‡∫µ‡ªà‡∫™‡∫∏‡∫î‡∫•‡∫∞‡∫´‡∫ß‡ªà‡∫≤‡∫á‡ªÄ‡∫ß‡∫•‡∫≤‡∫™‡∫¥‡ªâ‡∫ô‡∫™‡∫∏‡∫î‡∫Ç‡∫≠‡∫á‡∫≠‡∫≤‡∫à‡∫≤‡∫ô ‡ªÅ‡∫•‡∫∞ ‡ªÄ‡∫ß‡∫•‡∫≤‡∫™‡∫¥‡ªâ‡∫ô‡∫™‡∫∏‡∫î‡∫ó‡∫µ‡ªà‡∫Ñ‡∫¥‡∫î‡ªÑ‡∫•‡ªà‡∫à‡∫≤‡∫Å 45 ‡∫ô‡∫≤‡∫ó‡∫µ
    const effectiveEndTime = Math.min(adminEndTime, clientCalculatedEndTime);

    runTimer(effectiveEndTime, currentTime);
}

/**
 * ‡∫ö‡∫±‡∫ô‡∫ó‡∫∂‡∫Å‡∫Ñ‡∫≥‡∫ï‡∫≠‡∫ö‡∫Ç‡∫≠‡∫á‡∫Ñ‡∫≥‡∫ñ‡∫≤‡∫°‡∫õ‡∫±‡∫î‡∫à‡∫∏‡∫ö‡∫±‡∫ô
 */
function saveCurrentAnswer() {
    const q = questions[currentQuestionIndex];
    if (!q) return;

    switch (q.type) {
        case 'multiple-choice':
        case 'image-multiple-choice':
            const selectedOption = document.querySelector(`input[name="q${q.id}"]:checked`);
            userAnswers[q.id] = selectedOption ? selectedOption.value : undefined;
            break;

        case 'fill-in':
        case 'image-fill-in':
            userAnswers[q.id] = quizForm.elements[`q${q.id}`]?.value;
            break;

        case 'drag-fill-in':
            const answers = {};
            const dragFillBlock = document.getElementById(`question-${q.id}`);
            dragFillBlock.querySelectorAll('.drop-zone').forEach(zone => {
                const wordInside = zone.querySelector('.draggable-word');
                answers[zone.dataset.blankIndex] = wordInside ? wordInside.textContent : '';
            });
            userAnswers[q.id] = answers;
            break;

        case 'matching-text-text':
        case 'matching-text-image':
            const matches = {};
            const matchingBlock = document.getElementById(`question-${q.id}`);
            matchingBlock.querySelectorAll('.matching-drop-zone').forEach(zone => {
                const termIndex = zone.dataset.termIndex;
                const item = zone.querySelector('.match-item');
                if (item) {
                    matches[termIndex] = item.dataset.matchContent;
                }
            });
            userAnswers[q.id] = matches;
            break;
    }
}

function goToNextQuestion() {
    if (currentQuestionIndex < questions.length - 1) {
        saveCurrentAnswer();
        currentQuestionIndex++;
        renderCurrentQuestion();
    }
}

function goToPrevQuestion() {
    if (currentQuestionIndex > 0) {
        saveCurrentAnswer();
        currentQuestionIndex--;
        renderCurrentQuestion();
    }
}


/**
 * ‡∫™‡∫ª‡ªà‡∫á‡∫Ñ‡∫≥‡∫ï‡∫≠‡∫ö
 * @param {boolean} isAutoSubmit - ‡∫Å‡∫ß‡∫î‡∫™‡∫≠‡∫ö‡∫ß‡ªà‡∫≤‡ªÄ‡∫õ‡∫±‡∫ô‡∫Å‡∫≤‡∫ô‡∫™‡∫ª‡ªà‡∫á‡∫≠‡∫±‡∫î‡∫ï‡∫∞‡ªÇ‡∫ô‡∫°‡∫±‡∫î ‡∫´‡∫º‡∫∑ ‡∫ö‡ªç‡ªà
 */
async function submitQuiz(isAutoSubmit = false) {
    if (!isAutoSubmit) {
        const result = await Swal.fire({
            title: '‡∫¢‡∫∑‡∫ô‡∫¢‡∫±‡∫ô‡∫Å‡∫≤‡∫ô‡∫™‡∫ª‡ªà‡∫á‡∫Ñ‡∫≥‡∫ï‡∫≠‡∫ö',
            text: "‡∫ó‡ªà‡∫≤‡∫ô‡ªÅ‡∫ô‡ªà‡ªÉ‡∫à‡∫ö‡ªç‡ªà‡∫ß‡ªà‡∫≤‡∫ï‡ªâ‡∫≠‡∫á‡∫Å‡∫≤‡∫ô‡∫™‡∫ª‡ªà‡∫á‡∫Ñ‡∫≥‡∫ï‡∫≠‡∫ö?",
            icon: 'question',
            showCancelButton: true,
            confirmButtonText: '‡ªÅ‡∫°‡ªà‡∫ô, ‡∫™‡∫ª‡ªà‡∫á‡ªÄ‡∫•‡∫µ‡∫ç',
            cancelButtonText: '‡∫ç‡∫ª‡∫Å‡ªÄ‡∫•‡∫µ‡∫Å'
        });
        if (!result.isConfirmed) return;
    }

    saveCurrentAnswer(); // ‡∫ö‡∫±‡∫ô‡∫ó‡∫∂‡∫Å‡∫Ñ‡∫≥‡∫ï‡∫≠‡∫ö‡∫Ç‡∫≠‡∫á‡∫Ç‡ªç‡ªâ‡∫™‡∫∏‡∫î‡∫ó‡ªâ‡∫≤‡∫ç
    clearInterval(timerInterval);
    submitBtn.disabled = true;
    submitBtn.textContent = '‡∫Å‡∫≥‡∫•‡∫±‡∫á‡∫™‡∫ª‡ªà‡∫á...';
    navigationContainer.style.display = 'none';
    quizForm.style.pointerEvents = 'none'; // ‡∫õ‡∫¥‡∫î‡∫Å‡∫≤‡∫ô‡ªÇ‡∫ï‡ªâ‡∫ï‡∫≠‡∫ö‡∫Å‡∫±‡∫ö‡∫ü‡∫≠‡∫°‡∫ó‡∫±‡∫á‡ªù‡∫ª‡∫î

    let rawScore = 0; // ‡ªÉ‡∫ä‡ªâ‡ªÄ‡∫û‡∫∑‡ªà‡∫≠‡ªÄ‡∫Å‡∫±‡∫ö‡∫Ñ‡∫∞‡ªÅ‡∫ô‡∫ô‡∫î‡∫¥‡∫ö (‡∫à‡∫≥‡∫ô‡∫ß‡∫ô‡∫Ñ‡∫≥‡∫ï‡∫≠‡∫ö‡∫ó‡∫µ‡ªà‡∫ñ‡∫∑‡∫Å‡∫ï‡ªâ‡∫≠‡∫á)

    questions.forEach((q) => {
        let isCorrect = false;
        const answer = userAnswers[q.id];

        if (q.type.includes('matching')) {
            let correctMatches = 0;
            if (answer) {
                q.pairs.forEach((pair, pairIndex) => {
                    if (answer[pairIndex] === pair.match) {
                        correctMatches++;
                    }
                });
            }
            if (correctMatches === q.pairs.length) isCorrect = true;
        } else if (q.type === 'drag-fill-in') {
            let correctBlanks = 0;
            if (answer) {
                q.answer.forEach((correctAnswer, blankIndex) => {
                    if (answer[blankIndex] && answer[blankIndex].trim().toLowerCase() === correctAnswer.trim().toLowerCase()) {
                        correctBlanks++;
                    }
                });
            }
            if (correctBlanks === q.answer.length) isCorrect = true;
        } else {
            if (answer && answer.toString().trim().toLowerCase() === q.answer.toString().trim().toLowerCase()) {
                isCorrect = true;
            }
        }

        if (isCorrect) {
            rawScore++; // ‡ªÄ‡∫û‡∫µ‡ªà‡∫°‡∫Ñ‡∫∞‡ªÅ‡∫ô‡∫ô‡∫î‡∫¥‡∫ö
        }
    });

    // --- ‡ªÄ‡∫•‡∫µ‡ªà‡∫°‡∫ï‡∫ª‡ªâ‡∫ô‡∫Å‡∫≤‡∫ô‡∫õ‡∫±‡∫ö‡∫Ñ‡∫∞‡ªÅ‡∫ô‡∫ô‡ªÉ‡∫´‡ªâ‡∫¢‡∫π‡ªà‡ªÉ‡∫ô‡∫•‡∫∞‡∫´‡∫ß‡ªà‡∫≤‡∫á 5 ‡∫´‡∫≤ 10 ---
    const totalQuestions = questions.length;
    let finalScore;

    if (totalQuestions === 0) {
        finalScore = 5; // ‡∫ñ‡ªâ‡∫≤‡∫ö‡ªç‡ªà‡∫°‡∫µ‡∫Ñ‡∫≥‡∫ñ‡∫≤‡∫°, ‡ªÉ‡∫´‡ªâ‡∫Ñ‡∫∞‡ªÅ‡∫ô‡∫ô‡∫ï‡ªà‡∫≥‡∫™‡∫∏‡∫î
    } else if (rawScore === totalQuestions) {
        finalScore = 10; // ‡∫ï‡∫≠‡∫ö‡∫ñ‡∫∑‡∫Å‡ªù‡∫ª‡∫î, ‡ªÑ‡∫î‡ªâ 10
    } else if (rawScore === 0) {
        finalScore = 5; // ‡∫ï‡∫≠‡∫ö‡∫ú‡∫¥‡∫î‡ªù‡∫ª‡∫î, ‡ªÑ‡∫î‡ªâ 5
    } else {
        // ‡∫™‡∫π‡∫î‡ªÉ‡ªù‡ªà‡∫™‡∫≥‡∫•‡∫±‡∫ö‡∫Ñ‡∫∞‡ªÅ‡∫ô‡∫ô‡∫•‡∫∞‡∫´‡∫ß‡ªà‡∫≤‡∫á 6-9
        // ‡∫õ‡∫±‡∫ö‡∫Ç‡∫∞‡ªú‡∫≤‡∫î‡∫Ñ‡∫∞‡ªÅ‡∫ô‡∫ô‡∫î‡∫¥‡∫ö (1 ‡∫´‡∫≤ totalQuestions-1) ‡ªÑ‡∫õ‡∫´‡∫≤‡∫ä‡ªà‡∫ß‡∫á (6 ‡∫´‡∫≤ 9)
        const scoreRange = 4; // 9 - 5 = 4
        const scaledScore = 6 + ((rawScore - 1) / (totalQuestions - 2)) * (scoreRange - 1);
        finalScore = Math.round(scaledScore);
        if (finalScore < 6) finalScore = 6;
        if (finalScore > 9) finalScore = 9;
    }
    // --- ‡∫™‡∫¥‡ªâ‡∫ô‡∫™‡∫∏‡∫î‡∫Å‡∫≤‡∫ô‡∫õ‡∫±‡∫ö‡∫Ñ‡∫∞‡ªÅ‡∫ô‡∫ô ---

    const submissionData = {
        student_id: studentId,
        score: finalScore, // ‡ªÉ‡∫ä‡ªâ‡∫Ñ‡∫∞‡ªÅ‡∫ô‡∫ô‡∫ó‡∫µ‡ªà‡∫ñ‡∫∑‡∫Å‡∫õ‡∫±‡∫ö‡ªÅ‡∫•‡ªâ‡∫ß
        session_id: currentSessionId,
        answers: userAnswers // ‡ªÄ‡∫û‡∫µ‡ªà‡∫°‡∫Ñ‡∫≥‡∫ï‡∫≠‡∫ö‡∫Ç‡∫≠‡∫á‡∫ô‡∫±‡∫Å‡∫Æ‡∫Ω‡∫ô
    };

    // 1. ‡∫ö‡∫±‡∫ô‡∫ó‡∫∂‡∫Å‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô‡∫Å‡∫≤‡∫ô‡∫™‡∫ª‡ªà‡∫á‡∫Ñ‡∫≥‡∫ï‡∫≠‡∫ö
    const { error: submissionError } = await supabase_client.from('submissions').insert([submissionData]);

    if (submissionError) {
        Swal.fire('‡∫ú‡∫¥‡∫î‡∫û‡∫≤‡∫î!', '‡∫ö‡ªç‡ªà‡∫™‡∫≤‡∫°‡∫≤‡∫î‡∫ö‡∫±‡∫ô‡∫ó‡∫∂‡∫Å‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô‡∫Å‡∫≤‡∫ô‡∫™‡∫ª‡ªà‡∫á‡ªÑ‡∫î‡ªâ: ' + submissionError.message, 'error');
        submitBtn.disabled = false;
        submitBtn.textContent = '‚úîÔ∏è ‡∫™‡∫ª‡ªà‡∫á‡∫Ñ‡∫≥‡∫ï‡∫≠‡∫ö';
        return; // ‡∫¢‡∫∏‡∫î‡∫Å‡∫≤‡∫ô‡ªÄ‡∫Æ‡∫±‡∫î‡∫ß‡∫Ω‡∫Å‡∫ñ‡ªâ‡∫≤‡∫ö‡∫±‡∫ô‡∫ó‡∫∂‡∫Å submission ‡∫ö‡ªç‡ªà‡∫™‡∫≥‡ªÄ‡∫•‡∫±‡∫î
    }

    // 2. ‡∫≠‡∫±‡∫ö‡ªÄ‡∫î‡∫î‡∫Ñ‡∫∞‡ªÅ‡∫ô‡∫ô‡ªÉ‡∫ô‡∫ï‡∫≤‡∫ï‡∫∞‡∫•‡∫≤‡∫á students
    const { error: studentUpdateError } = await supabase_client
        .from('students')
        .update({ score: finalScore })
        .eq('id', studentId);

    if (studentUpdateError) {
        console.error('‡ªÄ‡∫Å‡∫µ‡∫î‡∫Ç‡ªç‡ªâ‡∫ú‡∫¥‡∫î‡∫û‡∫≤‡∫î‡ªÉ‡∫ô‡∫Å‡∫≤‡∫ô‡∫≠‡∫±‡∫ö‡ªÄ‡∫î‡∫î‡∫Ñ‡∫∞‡ªÅ‡∫ô‡∫ô‡∫ô‡∫±‡∫Å‡∫Æ‡∫Ω‡∫ô:', studentUpdateError.message);
    }

    // 3. ‡∫ñ‡ªâ‡∫≤‡∫ó‡∫∏‡∫Å‡∫¢‡ªà‡∫≤‡∫á‡∫™‡∫≥‡ªÄ‡∫•‡∫±‡∫î, ‡ªÑ‡∫õ‡ªú‡ªâ‡∫≤‡∫ú‡∫ª‡∫ô‡∫Ñ‡∫∞‡ªÅ‡∫ô‡∫ô
    sessionStorage.setItem('last_score', finalScore);
    sessionStorage.setItem('last_session_id', currentSessionId);
    window.location.href = 'final_results.html';
}

submitBtn.addEventListener('click', (e) => {
    e.preventDefault();
    submitQuiz(false);
});
prevBtn.addEventListener('click', goToPrevQuestion);
nextBtn.addEventListener('click', goToNextQuestion);

/**
 * ‡∫ü‡∫±‡∫á‡∫ä‡∫±‡∫ô‡∫´‡∫º‡∫±‡∫Å‡∫ó‡∫µ‡ªà‡∫Å‡∫ß‡∫î‡∫™‡∫≠‡∫ö‡∫™‡∫∞‡∫ñ‡∫≤‡∫ô‡∫∞ ‡ªÅ‡∫•‡∫∞ ‡∫Ñ‡∫ß‡∫ö‡∫Ñ‡∫∏‡∫°‡ªú‡ªâ‡∫≤‡ªÄ‡∫ß‡∫±‡∫ö
 */
async function handleExamState() {
    const sessionIdFromStorage = sessionStorage.getItem('current_session_id'); 
    if (!sessionIdFromStorage) {
        // ‡∫ñ‡ªâ‡∫≤‡∫ö‡ªç‡ªà‡∫°‡∫µ session ID, ‡ªù‡∫≤‡∫ç‡∫Ñ‡∫ß‡∫≤‡∫°‡∫ß‡ªà‡∫≤‡∫ö‡ªç‡ªà‡ªÑ‡∫î‡ªâ‡∫ú‡ªà‡∫≤‡∫ô‡∫Å‡∫≤‡∫ô login ‡∫¢‡ªà‡∫≤‡∫á‡∫ñ‡∫∑‡∫Å‡∫ï‡ªâ‡∫≠‡∫á, ‡∫™‡∫ª‡ªà‡∫á‡∫Å‡∫±‡∫ö‡ªÑ‡∫õ‡ªú‡ªâ‡∫≤ login
        console.log("No session ID found, redirecting to login.");
        window.location.replace('login.html');
        return;
    }

    const { data: session, error } = await supabase_client
        .from('quiz_sessions')
        .select('*')
        .eq('id', sessionIdFromStorage)
        .limit(1)
        .single();

    if (error || !session) {
        quizForm.innerHTML = '<p style="color: red;">‡∫ö‡ªç‡ªà‡∫™‡∫≤‡∫°‡∫≤‡∫î‡ªÄ‡∫ä‡∫∑‡ªà‡∫≠‡∫°‡∫ï‡ªç‡ªà‡∫Å‡∫±‡∫ö‡∫•‡∫∞‡∫ö‡∫ª‡∫ö‡∫™‡∫≠‡∫ö‡ªÄ‡∫™‡∫±‡∫á‡ªÑ‡∫î‡ªâ.</p>';
        return false; // ‡∫™‡∫ª‡ªà‡∫á‡∫Ñ‡ªà‡∫≤‡∫ö‡∫≠‡∫Å‡∫ß‡ªà‡∫≤‡ªÄ‡∫Å‡∫µ‡∫î‡∫Ç‡ªç‡ªâ‡∫ú‡∫¥‡∫î‡∫û‡∫≤‡∫î
    }

    currentSessionId = session.id;
    const status = session.status;

    // ‡∫Å‡∫ß‡∫î‡∫™‡∫≠‡∫ö‡∫ß‡ªà‡∫≤‡∫™‡∫∞‡∫ñ‡∫≤‡∫ô‡∫∞‡∫õ‡ªà‡∫Ω‡∫ô‡ªÅ‡∫õ‡∫á‡∫ö‡ªç‡ªà ‡∫Å‡ªà‡∫≠‡∫ô‡∫à‡∫∞ render ‡ªÉ‡ªù‡ªà
    if (status === lastKnownStatus) {
        return true; // ‡∫ñ‡ªâ‡∫≤‡∫™‡∫∞‡∫ñ‡∫≤‡∫ô‡∫∞‡∫Ñ‡∫∑‡ªÄ‡∫Å‡∫ª‡ªà‡∫≤, ‡∫ö‡ªç‡ªà‡∫ï‡ªâ‡∫≠‡∫á‡ªÄ‡∫Æ‡∫±‡∫î‡∫´‡∫ç‡∫±‡∫á, ‡ªÅ‡∫ï‡ªà‡ªÉ‡∫´‡ªâ polling ‡ªÄ‡∫Æ‡∫±‡∫î‡∫ß‡∫Ω‡∫Å‡∫ï‡ªç‡ªà
    }
    console.log(`Status changed from '${lastKnownStatus}' to '${status}'. Refreshing UI.`);
    lastKnownStatus = status; // ‡∫≠‡∫±‡∫ö‡ªÄ‡∫î‡∫î‡∫™‡∫∞‡∫ñ‡∫≤‡∫ô‡∫∞‡∫´‡∫º‡ªâ‡∫≤‡∫™‡∫∏‡∫î

    switch (status) {
        case 'OPEN':
            showWaitingRoom();
            break;
        case 'IN_PROGRESS':
            await startQuiz(session.target_class_level);
            await startTimer(session.end_time);
            break;
        case 'RESULTS_AVAILABLE':
            showExamClosed();
            break;
        case 'CLOSED':
            forceLogout();
            return false; // ‡∫™‡∫ª‡ªà‡∫á‡∫Ñ‡ªà‡∫≤‡∫ö‡∫≠‡∫Å‡∫ß‡ªà‡∫≤‡ªÉ‡∫´‡ªâ‡∫¢‡∫∏‡∫î‡∫Å‡∫≤‡∫ô‡ªÄ‡∫Æ‡∫±‡∫î‡∫ß‡∫Ω‡∫Å‡∫ï‡ªç‡ªà
            break;
        default:
            quizForm.innerHTML = '<p>‡∫Å‡∫≤‡∫ô‡∫™‡∫≠‡∫ö‡ªÄ‡∫™‡∫±‡∫á‡∫ç‡∫±‡∫á‡∫ö‡ªç‡ªà‡∫ó‡∫±‡∫ô‡ªÄ‡∫•‡∫µ‡ªà‡∫°.</p>';
            submitBtn.style.display = 'none';
            navigationContainer.style.display = 'none';
            quizTimerDiv.style.display = 'none';
            break;
    }

    return true; // ‡∫™‡∫ª‡ªà‡∫á‡∫Ñ‡ªà‡∫≤‡∫ö‡∫≠‡∫Å‡∫ß‡ªà‡∫≤‡ªÉ‡∫´‡ªâ‡ªÄ‡∫Æ‡∫±‡∫î‡∫ß‡∫Ω‡∫Å‡∫ï‡ªç‡ªà‡ªÑ‡∫î‡ªâ
}

/**
 * ‡∫ü‡∫±‡∫á‡∫Å‡∫≤‡∫ô‡∫õ‡ªà‡∫Ω‡∫ô‡ªÅ‡∫õ‡∫á‡∫™‡∫∞‡∫ñ‡∫≤‡∫ô‡∫∞‡∫à‡∫≤‡∫Å Realtime
 */
function listenForStateChanges() {
    const Toast = Swal.mixin({
        toast: true,
        position: 'top-end',
        showConfirmButton: false,
        timer: 3000,
        timerProgressBar: true,
    });

    if (!currentSessionId) {
        console.error("Cannot listen for state changes without a session ID.");
        return;
    }

    const channel = supabase_client.channel(`session-status-channel-${currentSessionId}`)
        .on('postgres_changes', { event: 'UPDATE', schema: 'public', table: 'quiz_sessions', filter: `id=eq.${currentSessionId}` }, async (payload) => {
            console.log('Realtime state change detected!', payload);
            const newStatus = payload.new.status;

            if (newStatus === 'IN_PROGRESS' && !quizStarted) {
                Toast.fire({ icon: 'info', title: '‡∫Å‡∫≤‡∫ô‡∫™‡∫≠‡∫ö‡ªÄ‡∫™‡∫±‡∫á‡ªÄ‡∫•‡∫µ‡ªà‡∫°‡ªÅ‡∫•‡ªâ‡∫ß!' });
                await startQuiz(payload.new.target_class_level);
                await startTimer(payload.new.end_time);
            } else if (newStatus === 'CLOSED') {
                forceLogout();
            } else if (newStatus === 'RESULTS_AVAILABLE') {
                if (quizStarted) {
                    Toast.fire({ icon: 'info', title: '‡∫Å‡∫≤‡∫ô‡∫™‡∫≠‡∫ö‡ªÄ‡∫™‡∫±‡∫á‡∫™‡∫¥‡ªâ‡∫ô‡∫™‡∫∏‡∫î‡ªÅ‡∫•‡ªâ‡∫ß, ‡∫Å‡∫≥‡∫•‡∫±‡∫á‡∫™‡∫ª‡ªà‡∫á‡∫Ñ‡∫≥‡∫ï‡∫≠‡∫ö...' });
                    await submitQuiz(true);
                } else {
                    console.log("Session ended while in waiting room. Submitting default score.");
                    const submissionData = {
                        student_id: studentId,
                        score: 5,
                        session_id: currentSessionId,
                        answers: {}
                    };
                    await supabase_client.from('submissions').insert([submissionData]);
                    await supabase_client
                        .from('students')
                        .update({ score: 5 })
                        .eq('id', studentId);
                    
                    window.location.href = 'final_results.html';
                }
            }
        })
        .subscribe((status, err) => {
            if (err) {
                console.error("‡ªÄ‡∫Å‡∫µ‡∫î‡∫Ç‡ªç‡ªâ‡∫ú‡∫¥‡∫î‡∫û‡∫≤‡∫î‡ªÉ‡∫ô‡∫Å‡∫≤‡∫ô‡ªÄ‡∫ä‡∫∑‡ªà‡∫≠‡∫°‡∫ï‡ªç‡ªà Realtime:", err);
            }
        });
}

/**
 * ‡ªÄ‡∫û‡∫µ‡ªà‡∫°‡∫Å‡∫≤‡∫ô‡ªÄ‡∫Æ‡∫±‡∫î‡∫ß‡∫Ω‡∫Å‡∫Ç‡∫≠‡∫á Drag and Drop
 */
function initializeDragAndDrop() {
    const draggables = document.querySelectorAll('.draggable-word, .match-item');
    const dropZones = document.querySelectorAll('.drop-zone, .matching-drop-zone, #match-source-pool');

    draggables.forEach(draggable => {
        draggable.addEventListener('dragstart', () => {
            draggable.classList.add('dragging');
        });
        draggable.addEventListener('dragend', () => {
            draggable.classList.remove('dragging');
        });
    });

    dropZones.forEach(zone => {
        zone.addEventListener('dragover', e => {
            e.preventDefault();
            // Allow drop only if the zone is empty or it's the source pool
            if (!zone.querySelector('.match-item, .draggable-word') || zone.id === 'match-source-pool') {
                zone.classList.add('over');
            }
        });
        zone.addEventListener('dragleave', () => {
            zone.classList.remove('over');
        });
        zone.addEventListener('drop', e => {
            e.preventDefault();
            zone.classList.remove('over');
            
            const draggable = document.querySelector('.dragging');
            if (draggable) {
                const originalContainer = draggable.parentElement;
                const itemInZone = zone.querySelector('.draggable-word, .match-item');

                if (itemInZone) {
                    originalContainer.appendChild(itemInZone);
                    zone.appendChild(draggable);
                } 
                else {
                    zone.appendChild(draggable);
                }
            }
        });
    });
}

/**
 * ‡∫Å‡∫ß‡∫î‡∫™‡∫≠‡∫ö‡∫™‡∫∞‡∫ñ‡∫≤‡∫ô‡∫∞‡ªÄ‡∫õ‡∫±‡∫ô‡ªÑ‡∫•‡∫ç‡∫∞‡ªÜ (Fallback Mechanism)
 */
function startPeriodicStateCheck() {
    const periodicCheckInterval = setInterval(async () => {
        if (!currentSessionId) {
            clearInterval(periodicCheckInterval);
            return;
        }

        const shouldContinue = await handleExamState();
        if (!shouldContinue) {
            clearInterval(periodicCheckInterval);
        }
    }, 3000);
}

// ‡ªÄ‡∫•‡∫µ‡ªà‡∫°‡∫Å‡∫≤‡∫ô‡ªÄ‡∫Æ‡∫±‡∫î‡∫ß‡∫Ω‡∫Å‡∫Ç‡∫≠‡∫á‡ªú‡ªâ‡∫≤‡∫™‡∫≠‡∫ö‡ªÄ‡∫™‡∫±‡∫á
async function initializeQuizPage() {
    const shouldContinue = await handleExamState();
    if (!shouldContinue) {
        return;
    }

    listenForStateChanges();
    startPeriodicStateCheck();

    // ‡∫Å‡∫ß‡∫î‡∫™‡∫≠‡∫ö‡∫ß‡ªà‡∫≤‡ªÄ‡∫Ñ‡∫µ‡∫ç‡∫™‡∫ª‡ªà‡∫á‡∫Ñ‡∫≥‡∫ï‡∫≠‡∫ö‡ªÉ‡∫ô session ‡∫ô‡∫µ‡ªâ‡ªÅ‡∫•‡ªâ‡∫ß‡∫ö‡ªç‡ªà
    const { data: existingSubmission, error } = await supabase_client
        .from('submissions')
        .select('id')
        .eq('student_id', studentId)
        .eq('session_id', currentSessionId)
        .single();

    if (existingSubmission) {
        Swal.fire({
            title: '‡ªÅ‡∫à‡ªâ‡∫á‡ªÄ‡∫ï‡∫∑‡∫≠‡∫ô',
            text: '‡∫ó‡ªà‡∫≤‡∫ô‡ªÑ‡∫î‡ªâ‡∫™‡∫ª‡ªà‡∫á‡∫Ñ‡∫≥‡∫ï‡∫≠‡∫ö‡∫™‡∫≥‡∫•‡∫±‡∫ö‡∫Æ‡∫≠‡∫ö‡∫ô‡∫µ‡ªâ‡ªÅ‡∫•‡ªâ‡∫ß.',
            icon: 'info',
            confirmButtonText: '‡ªÄ‡∫ö‡∫¥‡ªà‡∫á‡∫Ñ‡∫∞‡ªÅ‡∫ô‡∫ô'
        }).then(() => {
            window.location.href = 'final_results.html';
        });
    }
}

// ‡ªÄ‡∫≠‡∫µ‡ªâ‡∫ô‡ªÉ‡∫ä‡ªâ‡∫ü‡∫±‡∫á‡∫ä‡∫±‡∫ô‡∫´‡∫º‡∫±‡∫Å
initializeQuizPage();
