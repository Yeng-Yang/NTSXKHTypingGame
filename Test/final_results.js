document.addEventListener('DOMContentLoaded', async () => {
    const rankedSummaryContainer = document.getElementById('ranked-summary-container');
    const studentId = sessionStorage.getItem('current_student_id');
    const sessionId = sessionStorage.getItem('current_session_id');

    if (!studentId || !sessionId) {
        window.location.replace('login.html');
        return;
    }

    /**
     * ‡∫ü‡∫±‡∫á‡∫ä‡∫±‡∫ô‡∫ö‡∫±‡∫á‡∫Ñ‡∫±‡∫ö‡∫≠‡∫≠‡∫Å‡∫à‡∫≤‡∫Å‡∫•‡∫∞‡∫ö‡∫ª‡∫ö
     */
    function forceLogout() {
        Swal.fire({
            title: '‡∫•‡∫∞‡∫ö‡∫ª‡∫ö‡∫õ‡∫¥‡∫î‡ªÅ‡∫•‡ªâ‡∫ß',
            text: '‡∫≠‡∫≤‡∫à‡∫≤‡∫ô‡ªÑ‡∫î‡ªâ‡∫õ‡∫¥‡∫î‡∫•‡∫∞‡∫ö‡∫ª‡∫ö‡∫Å‡∫≤‡∫ô‡∫™‡∫≠‡∫ö‡ªÄ‡∫™‡∫±‡∫á‡ªÅ‡∫•‡ªâ‡∫ß. ‡∫Å‡ªç‡∫≤‡∫•‡∫±‡∫á‡∫≠‡∫≠‡∫Å‡∫à‡∫≤‡∫Å‡∫•‡∫∞‡∫ö‡∫ª‡∫ö...',
            icon: 'info',
            timer: 3000,
            showConfirmButton: false,
            allowOutsideClick: false
        }).then(() => {
            sessionStorage.clear();
            window.location.replace('login.html');
        });
    }

    // 1. ‡∫î‡∫∂‡∫á‡∫Ñ‡∫∞‡ªÅ‡∫ô‡∫ô‡∫´‡∫º‡ªâ‡∫≤‡∫™‡∫∏‡∫î‡∫Ç‡∫≠‡∫á‡∫ô‡∫±‡∫Å‡∫Æ‡∫Ω‡∫ô‡∫à‡∫≤‡∫Å‡∫ï‡∫≤‡∫ï‡∫∞‡∫•‡∫≤‡∫á students ‡ªÇ‡∫î‡∫ç‡∫Å‡∫ª‡∫á
    const { data: studentData, error: studentError } = await supabase_client
        .from('students')
        .select('score')
        .eq('id', studentId)
        .limit(1)
        .single();

    document.getElementById('student-info').textContent = `‡∫•‡∫∞‡∫´‡∫±‡∫î‡∫ô‡∫±‡∫Å‡∫Æ‡∫Ω‡∫ô: ${studentId}`;
    document.getElementById('score-display').textContent = studentData ? (studentData.score ?? '‡∫ç‡∫±‡∫á‡∫ö‡ªç‡ªà‡∫°‡∫µ') : '‡∫ö‡ªç‡ªà‡∫û‡∫ª‡∫ö‡∫Ñ‡∫∞‡ªÅ‡∫ô‡∫ô';

    // ‡∫ü‡∫±‡∫á‡∫ä‡∫±‡∫ô: ‡∫î‡∫∂‡∫á‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô ‡ªÅ‡∫•‡∫∞ ‡∫™‡∫∞‡ªÅ‡∫î‡∫á‡∫ú‡∫ª‡∫ô‡∫Å‡∫≤‡∫ô‡∫à‡∫±‡∫î‡∫≠‡∫±‡∫ô‡∫î‡∫±‡∫ö
    async function renderRankingTable() {
        const container = document.getElementById('ranked-summary-content');
        container.innerHTML = '<p>‡∫Å‡∫≥‡∫•‡∫±‡∫á‡ªÇ‡∫´‡∫º‡∫î‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô‡∫Å‡∫≤‡∫ô‡∫à‡∫±‡∫î‡∫≠‡∫±‡∫ô‡∫î‡∫±‡∫ö...</p>';

        const { data: rankedData, error: studentsError } = await supabase_client
            .from('students')
            .select('id, name, score')
            .order('score', { ascending: false, nullsFirst: false });

        if (studentsError) {
            container.innerHTML = '<p style="color: red;">‡ªÄ‡∫Å‡∫µ‡∫î‡∫Ç‡ªç‡ªâ‡∫ú‡∫¥‡∫î‡∫û‡∫≤‡∫î‡ªÉ‡∫ô‡∫Å‡∫≤‡∫ô‡ªÇ‡∫´‡∫º‡∫î‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô‡∫Å‡∫≤‡∫ô‡∫à‡∫±‡∫î‡∫≠‡∫±‡∫ô‡∫î‡∫±‡∫ö.</p>';
            return;
        }

        const top3 = rankedData.filter(s => s.score !== null).slice(0, 3);
        const rank1 = top3[0];
        const rank2 = top3[1];
        const rank3 = top3[2];

        let podiumHtml = '<div class="podium-container">';
        podiumHtml += rank2 ? `<div class="podium-spot rank-2-spot"><h3>ü•à ‡∫≠‡∫±‡∫ô‡∫î‡∫±‡∫ö 2</h3><p>${rank2.name}</p><p>ID: ${rank2.id}</p><p class="score">${rank2.score}</p></div>` : '<div></div>';
        podiumHtml += rank1 ? `<div class="podium-spot rank-1-spot"><h3>ü•á ‡∫≠‡∫±‡∫ô‡∫î‡∫±‡∫ö 1</h3><p>${rank1.name}</p><p>ID: ${rank1.id}</p><p class="score">${rank1.score}</p></div>` : '<div></div>';
        podiumHtml += rank3 ? `<div class="podium-spot rank-3-spot"><h3>ü•â ‡∫≠‡∫±‡∫ô‡∫î‡∫±‡∫ö 3</h3><p>${rank3.name}</p><p>ID: ${rank3.id}</p><p class="score">${rank3.score}</p></div>` : '<div></div>';
        podiumHtml += '</div>';

        let tableHtml = '<h4>‡∫≠‡∫±‡∫ô‡∫î‡∫±‡∫ö‡∫≠‡∫∑‡ªà‡∫ô‡ªÜ</h4><table id="scores-table"><thead><tr><th>‡∫≠‡∫±‡∫ô‡∫î‡∫±‡∫ö</th><th>‡∫ä‡∫∑‡ªà ‡∫ô‡∫±‡∫Å‡∫Æ‡∫Ω‡∫ô</th><th>ID ‡∫ô‡∫±‡∫Å‡∫Æ‡∫Ω‡∫ô</th><th>‡∫Ñ‡∫∞‡ªÅ‡∫ô‡∫ô</th></tr></thead><tbody>';
        rankedData.forEach((data, index) => {
            const isCurrentUser = data.id === studentId;
            let rankClass = 'rank-other';
            if (data.score !== null) {
                const rank = rankedData.filter(s => s.score !== null).findIndex(s => s.id === data.id);
                if (rank === 0) rankClass = 'rank-1';
                else if (rank === 1) rankClass = 'rank-2';
                else if (rank === 2) rankClass = 'rank-3';
            } else {
                rankClass = '';
            }

            if (isCurrentUser) {
                rankClass += ' current-student-row';
            }
            tableHtml += `<tr class="${rankClass.trim()}"><td>${data.score !== null ? (index + 1) : '-'}</td><td>${data.name}</td><td>${data.id}</td><td>${data.score ?? '‡∫ç‡∫±‡∫á‡∫ö‡ªç‡ªà‡∫°‡∫µ'}</td></tr>`;
        });
        tableHtml += '</tbody></table>';
        container.innerHTML = podiumHtml + tableHtml;
    }

    /**
     * ‡∫ü‡∫±‡∫á‡∫ä‡∫±‡∫ô: ‡∫™‡∫∞‡ªÅ‡∫î‡∫á‡∫ö‡∫ª‡∫î‡∫Å‡∫ß‡∫î‡∫Å‡∫≤‡∫Ñ‡∫∑‡∫ô‡∫û‡ªâ‡∫≠‡∫°‡∫Ñ‡∫≥‡∫ï‡∫≠‡∫ö‡∫ó‡∫µ‡ªà‡∫ñ‡∫∑‡∫Å‡∫ï‡ªâ‡∫≠‡∫á
     */
    async function renderQuizReview() {
        const reviewContainer = document.getElementById('quiz-review-content');
        const reviewMainContainer = document.getElementById('quiz-review-container');
        reviewContainer.innerHTML = '<p>‡∫Å‡∫≥‡∫•‡∫±‡∫á‡ªÇ‡∫´‡∫º‡∫î‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô‡∫Ñ‡∫≥‡∫ï‡∫≠‡∫ö...</p>';

        // 1. ‡∫î‡∫∂‡∫á‡∫Ñ‡∫≥‡∫ñ‡∫≤‡∫°‡∫ó‡∫±‡∫á‡ªù‡∫ª‡∫î
        const { data: questions, error: questionsError } = await supabase_client
            .from('questions')
            .select('*')
            .order('created_at', { ascending: true });

        if (questionsError) {
            reviewContainer.innerHTML = '<p style="color: red;">‡ªÄ‡∫Å‡∫µ‡∫î‡∫Ç‡ªç‡ªâ‡∫ú‡∫¥‡∫î‡∫û‡∫≤‡∫î‡ªÉ‡∫ô‡∫Å‡∫≤‡∫ô‡ªÇ‡∫´‡∫º‡∫î‡∫Ñ‡∫≥‡∫ñ‡∫≤‡∫°.</p>';
            return;
        }

        // 2. ‡∫î‡∫∂‡∫á‡∫Ñ‡∫≥‡∫ï‡∫≠‡∫ö‡∫Ç‡∫≠‡∫á‡∫ô‡∫±‡∫Å‡∫Æ‡∫Ω‡∫ô
        const { data: submission, error: submissionError } = await supabase_client
            .from('submissions')
            .select('answers')
            .eq('student_id', studentId)
            .eq('session_id', sessionId)
            .single();

        if (submissionError || !submission || !submission.answers) {
            reviewContainer.innerHTML = '<p>‡∫ö‡ªç‡ªà‡∫û‡∫ª‡∫ö‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô‡∫Ñ‡∫≥‡∫ï‡∫≠‡∫ö‡∫Ç‡∫≠‡∫á‡∫ó‡ªà‡∫≤‡∫ô.</p>';
            return;
        }

        reviewMainContainer.style.display = 'block';
        reviewContainer.innerHTML = ''; // ‡∫•‡ªâ‡∫≤‡∫á‡∫Ç‡ªç‡ªâ‡∫Ñ‡∫ß‡∫≤‡∫° "‡∫Å‡∫≥‡∫•‡∫±‡∫á‡ªÇ‡∫´‡∫º‡∫î..."

        const userAnswers = submission.answers;

        questions.forEach((q, index) => {
            const questionBlock = document.createElement('div');
            questionBlock.className = 'question-block review-block'; // ‡ªÄ‡∫û‡∫µ‡ªà‡∫° class ‡ªÄ‡∫û‡∫∑‡ªà‡∫≠ style

            let content = `<div class="question-text">${index + 1}. ${q.question}</div>`;
            if (q.image_url) {
                content += `<img src="${q.image_url}" alt="Question Image" class="question-image">`;
            }

            const userAnswer = userAnswers[index];
            let isCorrect = false;

            // ‡∫Å‡∫ß‡∫î‡∫™‡∫≠‡∫ö‡∫Ñ‡∫≥‡∫ï‡∫≠‡∫ö ‡ªÅ‡∫•‡∫∞ ‡∫™‡ªâ‡∫≤‡∫á HTML
            switch (q.type) {
                case 'multiple-choice':
                case 'image-multiple-choice':
                    isCorrect = userAnswer === q.answer;
                    content += '<div class="options-container">';
                    q.options.forEach(option => {
                        let className = '';
                        if (option === q.answer) {
                            className = 'correct-answer'; // ‡∫Ñ‡∫≥‡∫ï‡∫≠‡∫ö‡∫ó‡∫µ‡ªà‡∫ñ‡∫∑‡∫Å
                        }
                        if (option === userAnswer && !isCorrect) {
                            className = 'incorrect-answer'; // ‡∫Ñ‡∫≥‡∫ï‡∫≠‡∫ö‡∫ó‡∫µ‡ªà‡∫ú‡∫π‡ªâ‡ªÉ‡∫ä‡ªâ‡ªÄ‡∫•‡∫∑‡∫≠‡∫Å (‡∫ú‡∫¥‡∫î)
                        }
                        content += `<div class="review-option ${className}">${option}</div>`;
                    });
                    content += '</div>';
                    break;

                case 'fill-in':
                case 'image-fill-in':
                    isCorrect = userAnswer && userAnswer.toString().trim().toLowerCase() === q.answer.toString().trim().toLowerCase();
                    content += `<p>‡∫Ñ‡∫≥‡∫ï‡∫≠‡∫ö‡∫Ç‡∫≠‡∫á‡∫ó‡ªà‡∫≤‡∫ô: <span class="${isCorrect ? 'correct-answer' : 'incorrect-answer'}">${userAnswer || '<i>(‡∫ö‡ªç‡ªà‡ªÑ‡∫î‡ªâ‡∫ï‡∫≠‡∫ö)</i>'}</span></p>`;
                    if (!isCorrect) {
                        content += `<p>‡∫Ñ‡∫≥‡∫ï‡∫≠‡∫ö‡∫ó‡∫µ‡ªà‡∫ñ‡∫∑‡∫Å‡∫ï‡ªâ‡∫≠‡∫á: <span class="correct-answer">${q.answer}</span></p>`;
                    }
                    break;
                
                // ‡∫™‡∫≤‡∫°‡∫≤‡∫î‡ªÄ‡∫û‡∫µ‡ªà‡∫°‡∫Å‡∫≤‡∫ô‡∫™‡∫∞‡ªÅ‡∫î‡∫á‡∫ú‡∫ª‡∫ô‡∫™‡∫≥‡∫•‡∫±‡∫ö‡∫Ñ‡∫≥‡∫ñ‡∫≤‡∫°‡∫õ‡∫∞‡ªÄ‡∫û‡∫î‡∫≠‡∫∑‡ªà‡∫ô‡ªÜ‡ªÑ‡∫î‡ªâ‡∫ó‡∫µ‡ªà‡∫ô‡∫µ‡ªâ (matching, drag-fill-in)

                default:
                     content += `<p><i>(‡∫ö‡ªç‡ªà‡∫Æ‡∫≠‡∫á‡∫Æ‡∫±‡∫ö‡∫Å‡∫≤‡∫ô‡∫™‡∫∞‡ªÅ‡∫î‡∫á‡∫ú‡∫ª‡∫ô‡∫Ñ‡∫≥‡∫ï‡∫≠‡∫ö‡∫™‡∫≥‡∫•‡∫±‡∫ö‡∫Ñ‡∫≥‡∫ñ‡∫≤‡∫°‡∫õ‡∫∞‡ªÄ‡∫û‡∫î‡∫ô‡∫µ‡ªâ)</i></p>`;
                     break;
            }

            // ‡ªÄ‡∫û‡∫µ‡ªà‡∫°‡ªÑ‡∫≠‡∫Ñ‡∫≠‡∫ô‡∫ñ‡∫∑‡∫Å/‡∫ú‡∫¥‡∫î ‡ªÉ‡∫™‡ªà‡∫´‡∫ª‡∫ß‡∫Ç‡ªç‡ªâ‡∫Ñ‡∫≥‡∫ñ‡∫≤‡∫°
            if (isCorrect) {
                questionBlock.classList.add('correct-question');
            } else {
                questionBlock.classList.add('incorrect-question');
            }

            questionBlock.innerHTML = content;
            reviewContainer.appendChild(questionBlock);
        });
    }

    let typingInterval;
    function animateTyping(element, text) {
        if (typingInterval) clearInterval(typingInterval);

        let i = 0;
        let isDeleting = false;

        typingInterval = setInterval(() => {
            if (isDeleting) {
                element.textContent = '';
                i = 0;
                isDeleting = false;
            } else {
                if (i < text.length) {
                    element.textContent = text.substring(0, i + 1);
                    i++;
                } else {
                    setTimeout(() => {
                        isDeleting = true;
                    }, 2000);
                }
            }
        }, 80);
    }

    async function checkAndRender() {
        const { data: sessionStatus, error } = await supabase_client
            .from('quiz_sessions')
            .select('status')
            .eq('id', sessionId)
            .single();

        if (error) {
            console.error("Error checking session status:", error);
            rankedSummaryContainer.style.display = 'block';
            const container = document.getElementById('ranked-summary-content');
            container.innerHTML = '<p style="color: red;">‡ªÄ‡∫Å‡∫µ‡∫î‡∫Ç‡ªç‡ªâ‡∫ú‡∫¥‡∫î‡∫û‡∫≤‡∫î‡ªÉ‡∫ô‡∫Å‡∫≤‡∫ô‡∫Å‡∫ß‡∫î‡∫™‡∫≠‡∫ö‡∫™‡∫∞‡∫ñ‡∫≤‡∫ô‡∫∞.</p>';
            return;
        }

        if (sessionStatus && sessionStatus.status === 'CLOSED') {
            forceLogout();
            return; // ‡∫¢‡∫∏‡∫î‡∫Å‡∫≤‡∫ô‡ªÄ‡∫Æ‡∫±‡∫î‡∫ß‡∫Ω‡∫Å‡∫ï‡ªç‡ªà
        }

        // ‡ªÄ‡∫á‡∫∑‡ªà‡∫≠‡∫ô‡ªÑ‡∫Ç‡ªÉ‡ªù‡ªà: ‡∫™‡∫∞‡ªÅ‡∫î‡∫á‡∫ú‡∫ª‡∫ô‡∫Å‡∫≤‡∫ô‡∫à‡∫±‡∫î‡∫≠‡∫±‡∫ô‡∫î‡∫±‡∫ö‡∫™‡∫∞‡ªÄ‡∫û‡∫≤‡∫∞‡ªÄ‡∫°‡∫∑‡ªà‡∫≠‡∫≠‡∫≤‡∫à‡∫≤‡∫ô‡∫õ‡∫∞‡∫Å‡∫≤‡∫î‡∫Ñ‡∫∞‡ªÅ‡∫ô‡∫ô (RESULTS_AVAILABLE) ‡ªÄ‡∫ó‡∫ª‡ªà‡∫≤‡∫ô‡∫±‡ªâ‡∫ô
        if (sessionStatus && sessionStatus.status === 'RESULTS_AVAILABLE') {
            rankedSummaryContainer.style.display = 'block';
            renderRankingTable();
            renderQuizReview(); // ‡ªÄ‡∫≠‡∫µ‡ªâ‡∫ô‡∫ü‡∫±‡∫á‡∫ä‡∫±‡∫ô‡∫™‡∫∞‡ªÅ‡∫î‡∫á‡∫Ñ‡∫≥‡∫ï‡∫≠‡∫ö
        } else {
            rankedSummaryContainer.style.display = 'block';
            const container = document.getElementById('ranked-summary-content');
            container.innerHTML = `
                <div class="waiting-animation-container">
                    <h2 style="text-align: left; min-height: 1.5em;"><span class="hourglass-anim">‚è≥</span> <span id="typing-text"></span><span class="typing-caret">|</span></h2>
                </div>`;
            const typingElement = document.getElementById('typing-text');
            animateTyping(typingElement, "‡∫Å‡∫∞‡∫•‡∫∏‡∫ô‡∫≤‡∫•‡ªç‡∫ñ‡ªâ‡∫≤ ‡∫≠‡∫≤‡∫à‡∫≤‡∫ô‡∫õ‡∫∞‡∫Å‡∫≤‡∫î‡∫Ñ‡∫∞‡ªÅ‡∫ô‡∫ô...");
        }
    }

    await checkAndRender();

    /**
     * ‡∫Å‡∫ß‡∫î‡∫™‡∫≠‡∫ö‡∫™‡∫∞‡∫ñ‡∫≤‡∫ô‡∫∞‡ªÄ‡∫õ‡∫±‡∫ô‡ªÑ‡∫•‡∫ç‡∫∞‡ªÜ (Fallback Mechanism)
     * ‡ªÄ‡∫û‡∫∑‡ªà‡∫≠‡∫Æ‡∫±‡∫ö‡∫õ‡∫∞‡∫Å‡∫±‡∫ô‡∫ß‡ªà‡∫≤‡∫à‡∫∞‡∫≠‡∫≠‡∫Å‡∫à‡∫≤‡∫Å‡∫•‡∫∞‡∫ö‡∫ª‡∫ö‡∫™‡∫∞‡ªÄ‡ªù‡∫µ‡ªÄ‡∫°‡∫∑‡ªà‡∫≠‡∫™‡∫∞‡∫ñ‡∫≤‡∫ô‡∫∞‡ªÄ‡∫õ‡∫±‡∫ô CLOSED
     */
    function startPeriodicStateCheck() {
        setInterval(async () => {
            if (!sessionId) return;

            const { data, error } = await supabase_client
                .from('quiz_sessions')
                .select('status')
                .eq('id', sessionId)
                .single();

            if (data && data.status === 'CLOSED') {
                forceLogout();
            }
        }, 15000); // ‡∫Å‡∫ß‡∫î‡∫™‡∫≠‡∫ö‡∫ó‡∫∏‡∫Å‡ªÜ 15 ‡∫ß‡∫¥‡∫ô‡∫≤‡∫ó‡∫µ
    }

    const sessionChannel = supabase_client.channel(`session-status-channel-${sessionId}`)
        .on('postgres_changes', { event: 'UPDATE', schema: 'public', table: 'quiz_sessions', filter: `id=eq.${sessionId}` }, payload => {
            const newStatus = payload.new.status;
            const oldStatus = payload.old ? payload.old.status : '';

            if (newStatus === 'RESULTS_AVAILABLE' && oldStatus !== 'RESULTS_AVAILABLE') {
                Swal.fire({ icon: 'success', title: '‡∫õ‡∫∞‡∫Å‡∫≤‡∫î‡∫Ñ‡∫∞‡ªÅ‡∫ô‡∫ô!', text: '‡∫Å‡∫≥‡∫•‡∫±‡∫á‡∫™‡∫∞‡ªÅ‡∫î‡∫á‡∫ú‡∫ª‡∫ô‡∫Å‡∫≤‡∫ô‡∫à‡∫±‡∫î‡∫≠‡∫±‡∫ô‡∫î‡∫±‡∫ö...' });
            }

            if (newStatus === 'CLOSED') {
                forceLogout();
                return;
            }

            checkAndRender();
        })
        .subscribe();

    const studentScoresChannel = supabase_client.channel('student-scores-channel')
        .on('postgres_changes', { event: 'UPDATE', schema: 'public', table: 'students' }, (payload) => {
            console.log('‡∫Å‡∫ß‡∫î‡∫û‡∫ª‡∫ö‡∫Å‡∫≤‡∫ô‡∫≠‡∫±‡∫ö‡ªÄ‡∫î‡∫î‡∫Ñ‡∫∞‡ªÅ‡∫ô‡∫ô‡∫ô‡∫±‡∫Å‡∫Æ‡∫Ω‡∫ô:', payload);
            
            if (rankedSummaryContainer.style.display === 'block') {
                renderRankingTable();
            }
            
            if (payload.new.id === studentId) {
                document.getElementById('score-display').textContent = payload.new.score ?? '‡∫ç‡∫±‡∫á‡∫ö‡ªç‡ªà‡∫°‡∫µ';
            }
        })
        .subscribe();
        
    startPeriodicStateCheck(); // ‡ªÄ‡∫•‡∫µ‡ªà‡∫°‡∫Å‡∫ª‡∫ô‡ªÑ‡∫Å‡∫Å‡∫ß‡∫î‡∫™‡∫≠‡∫ö‡∫™‡∫≥‡∫Æ‡∫≠‡∫á
});
