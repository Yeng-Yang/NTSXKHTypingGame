document.addEventListener('DOMContentLoaded', async () => {
    const rankedSummaryContainer = document.getElementById('ranked-summary-container');
    const logoutTimerContainer = document.getElementById('logout-timer-container');
    const studentId = sessionStorage.getItem('current_student_id');
    if (!studentId) {
        window.location.href = 'login.html';
        return;
    }

    // 1. ‡∫î‡∫∂‡∫á‡∫Ñ‡∫∞‡ªÅ‡∫ô‡∫ô ‡ªÅ‡∫•‡∫∞ session_id ‡∫à‡∫≤‡∫Å‡∫Å‡∫≤‡∫ô‡∫™‡∫ª‡ªà‡∫á‡∫•‡ªà‡∫≤‡∫™‡∫∏‡∫î‡∫Ç‡∫≠‡∫á‡∫ô‡∫±‡∫Å‡∫Æ‡∫Ω‡∫ô‡∫Ñ‡∫ª‡∫ô‡∫ô‡∫µ‡ªâ
    const { data: latestSubmission, error: submissionError } = await supabase_client
        .from('submissions')
        .select('score, session_id')
        .eq('student_id', studentId)
        .order('submitted_at', { ascending: false })
        .limit(1)
        .single();

    document.getElementById('student-info').textContent = `‡∫•‡∫∞‡∫´‡∫±‡∫î‡∫ô‡∫±‡∫Å‡∫Æ‡∫Ω‡∫ô: ${studentId}`;
    document.getElementById('score-display').textContent = latestSubmission ? latestSubmission.score : '‡∫ö‡ªç‡ªà‡∫û‡∫ª‡∫ö‡∫Ñ‡∫∞‡ªÅ‡∫ô‡∫ô';

    // Function to start the 5-minute logout timer
    function startLogoutTimer() {
        logoutTimerContainer.style.display = 'block';
        const timerDisplay = document.getElementById('logout-timer');

        // ‡∫Å‡∫ß‡∫î‡∫™‡∫≠‡∫ö‡∫ß‡ªà‡∫≤‡ªÄ‡∫Ñ‡∫µ‡∫ç‡∫ï‡∫±‡ªâ‡∫á‡ªÄ‡∫ß‡∫•‡∫≤‡ªù‡∫ª‡∫î‡∫≠‡∫≤‡∫ç‡∫∏‡ªÑ‡∫ß‡ªâ‡ªÅ‡∫•‡ªâ‡∫ß‡∫ö‡ªç‡ªà
        let expiryTime = sessionStorage.getItem('logoutExpiry');
        if (!expiryTime) {
            // ‡∫ñ‡ªâ‡∫≤‡∫ç‡∫±‡∫á‡∫ö‡ªç‡ªà‡∫°‡∫µ, ‡ªÉ‡∫´‡ªâ‡∫ï‡∫±‡ªâ‡∫á‡ªÄ‡∫ß‡∫•‡∫≤‡ªù‡∫ª‡∫î‡∫≠‡∫≤‡∫ç‡∫∏‡ªÉ‡ªù‡ªà (5 ‡∫ô‡∫≤‡∫ó‡∫µ‡∫ô‡∫±‡∫ö‡∫à‡∫≤‡∫Å‡∫ô‡∫µ‡ªâ)
            expiryTime = new Date().getTime() + 5 * 60 * 1000;
            sessionStorage.setItem('logoutExpiry', expiryTime);
        } else {
            // ‡∫ñ‡ªâ‡∫≤‡∫°‡∫µ‡ªÅ‡∫•‡ªâ‡∫ß, ‡ªÉ‡∫´‡ªâ‡ªÅ‡∫õ‡∫á‡∫à‡∫≤‡∫Å String ‡∫Å‡∫±‡∫ö‡∫°‡∫≤‡ªÄ‡∫õ‡∫±‡∫ô Number
            expiryTime = parseInt(expiryTime, 10);
        }

        // ‡∫Ñ‡∫≥‡∫ô‡∫ß‡∫ô‡ªÄ‡∫ß‡∫•‡∫≤‡∫ó‡∫µ‡ªà‡ªÄ‡∫´‡∫º‡∫∑‡∫≠‡∫à‡∫≤‡∫Å‡ªÄ‡∫ß‡∫•‡∫≤‡ªù‡∫ª‡∫î‡∫≠‡∫≤‡∫ç‡∫∏
        let duration = Math.round((expiryTime - new Date().getTime()) / 1000);

        const interval = setInterval(() => {
            const minutes = Math.floor(duration / 60);
            const seconds = duration % 60;

            timerDisplay.textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;

            if (--duration < 0) {
                clearInterval(interval);
                // Time's up, log out the user
                Swal.fire({
                    title: '‡ªù‡∫ª‡∫î‡ªÄ‡∫ß‡∫•‡∫≤‡ªÄ‡∫ö‡∫¥‡ªà‡∫á‡∫Ñ‡∫∞‡ªÅ‡∫ô‡∫ô',
                    text: '‡∫Å‡∫≥‡∫•‡∫±‡∫á‡∫≠‡∫≠‡∫Å‡∫à‡∫≤‡∫Å‡∫•‡∫∞‡∫ö‡∫ª‡∫ö...',
                    icon: 'info',
                    timer: 2000,
                    showConfirmButton: false,
                    allowOutsideClick: false
                }).then(() => {
                    sessionStorage.clear(); // Clear all session data
                    window.location.replace('login.html');
                });
            }
        }, 1000);
    }

    // Function to fetch and render the ranking table
    async function renderRankingTable(sessionId, studentId) {
        const container = document.getElementById('ranked-summary-content');
        container.innerHTML = '<p>‡∫Å‡∫≥‡∫•‡∫±‡∫á‡ªÇ‡∫´‡∫º‡∫î‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô‡∫Å‡∫≤‡∫ô‡∫à‡∫±‡∫î‡∫≠‡∫±‡∫ô‡∫î‡∫±‡∫ö...</p>';

        // 1. ‡∫î‡∫∂‡∫á‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô‡∫ô‡∫±‡∫Å‡∫Æ‡∫Ω‡∫ô‡∫ó‡∫±‡∫á‡ªù‡∫ª‡∫î
        const { data: students, error: studentsError } = await supabase_client
            .from('students')
            .select('id, name');

        if (studentsError) {
            container.innerHTML = '<p style="color: red;">‡ªÄ‡∫Å‡∫µ‡∫î‡∫Ç‡ªç‡ªâ‡∫ú‡∫¥‡∫î‡∫û‡∫≤‡∫î‡ªÉ‡∫ô‡∫Å‡∫≤‡∫ô‡ªÇ‡∫´‡∫º‡∫î‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô‡∫ô‡∫±‡∫Å‡∫Æ‡∫Ω‡∫ô.</p>';
            return;
        }

        // 2. ‡∫î‡∫∂‡∫á‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô‡∫Å‡∫≤‡∫ô‡∫™‡∫ª‡ªà‡∫á‡∫Ñ‡∫≥‡∫ï‡∫≠‡∫ö‡∫ó‡∫±‡∫á‡ªù‡∫ª‡∫î
        const { data: submissions, error: submissionsError } = await supabase_client
            .from('submissions')
            .select('student_id, score, submitted_at');

        if (submissionsError) {
            container.innerHTML = '<p style="color: red;">‡ªÄ‡∫Å‡∫µ‡∫î‡∫Ç‡ªç‡ªâ‡∫ú‡∫¥‡∫î‡∫û‡∫≤‡∫î‡ªÉ‡∫ô‡∫Å‡∫≤‡∫ô‡ªÇ‡∫´‡∫º‡∫î‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô‡∫Ñ‡∫∞‡ªÅ‡∫ô‡∫ô.</p>';
            return;
        }

        // 3. ‡∫ä‡∫≠‡∫Å‡∫´‡∫≤‡∫Ñ‡∫∞‡ªÅ‡∫ô‡∫ô‡∫´‡∫º‡ªâ‡∫≤‡∫™‡∫∏‡∫î‡∫Ç‡∫≠‡∫á‡∫ô‡∫±‡∫Å‡∫Æ‡∫Ω‡∫ô‡ªÅ‡∫ï‡ªà‡∫•‡∫∞‡∫Ñ‡∫ª‡∫ô
        const latestScores = new Map();
        submissions.forEach(sub => {
            const existing = latestScores.get(sub.student_id);
            if (!existing || new Date(sub.submitted_at) > new Date(existing.submitted_at)) {
                latestScores.set(sub.student_id, sub.score);
            }
        });

        // 4. ‡∫™‡ªâ‡∫≤‡∫á‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô‡∫•‡∫ß‡∫° ‡ªÅ‡∫•‡∫∞ ‡∫à‡∫±‡∫î‡∫≠‡∫±‡∫ô‡∫î‡∫±‡∫ö
        const rankedData = students.map(student => ({
            ...student,
            score: latestScores.get(student.id) ?? null
        })).sort((a, b) => (b.score ?? -1) - (a.score ?? -1));

        // 5. ‡∫™‡ªâ‡∫≤‡∫á Podium ‡ªÅ‡∫•‡∫∞ ‡∫ï‡∫≤‡∫ï‡∫∞‡∫•‡∫≤‡∫á
        const top3 = rankedData.filter(s => s.score !== null).slice(0, 3);
        const rank1 = top3[0], rank2 = top3[1], rank3 = top3[2];

        let podiumHtml = '<div class="podium-container">';
        podiumHtml += rank2 ? `<div class="podium-spot rank-2-spot"><h3>ü•à ‡∫≠‡∫±‡∫ô‡∫î‡∫±‡∫ö 2</h3><p>${rank2.name}</p><p>ID: ${rank2.id}</p><p class="score">${rank2.score}</p></div>` : '<div></div>';
        podiumHtml += rank1 ? `<div class="podium-spot rank-1-spot"><h3>ü•á ‡∫≠‡∫±‡∫ô‡∫î‡∫±‡∫ö 1</h3><p>${rank1.name}</p><p>ID: ${rank1.id}</p><p class="score">${rank1.score}</p></div>` : '<div><p>‡∫ç‡∫±‡∫á‡∫ö‡ªç‡ªà‡∫°‡∫µ‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô‡∫Ñ‡∫∞‡ªÅ‡∫ô‡∫ô</p></div>';
        podiumHtml += rank3 ? `<div class="podium-spot rank-3-spot"><h3>ü•â ‡∫≠‡∫±‡∫ô‡∫î‡∫±‡∫ö 3</h3><p>${rank3.name}</p><p>ID: ${rank3.id}</p><p class="score">${rank3.score}</p></div>` : '<div></div>';
        podiumHtml += '</div>';

        let tableHtml = '<h4>‡∫•‡∫≤‡∫ç‡∫•‡∫∞‡∫≠‡∫Ω‡∫î‡∫ó‡∫∏‡∫Å‡∫≠‡∫±‡∫ô‡∫î‡∫±‡∫ö</h4><table id="scores-table"><thead><tr><th>‡∫≠‡∫±‡∫ô‡∫î‡∫±‡∫ö</th><th>‡∫ä‡∫∑‡ªà ‡∫ô‡∫±‡∫Å‡∫Æ‡∫Ω‡∫ô</th><th>ID ‡∫ô‡∫±‡∫Å‡∫Æ‡∫Ω‡∫ô</th><th>‡∫Ñ‡∫∞‡ªÅ‡∫ô‡∫ô</th></tr></thead><tbody>';
        rankedData.forEach((data, index) => {
            const isCurrentUser = data.id === studentId;
            let rankClass = '';
            if (data.score !== null) {
                const rank = rankedData.filter(s => s.score !== null).findIndex(s => s.id === data.id);
                if (rank === 0) rankClass = 'rank-1';
                else if (rank === 1) rankClass = 'rank-2';
                else if (rank === 2) rankClass = 'rank-3';
            }
            if (isCurrentUser) {
                rankClass += ' current-student-row';
            }
            tableHtml += `<tr class="${rankClass.trim()}"><td>${data.score !== null ? (index + 1) : '-'}</td><td>${data.name}</td><td>${data.id}</td><td>${data.score ?? '‡∫ç‡∫±‡∫á‡∫ö‡ªç‡ªà‡∫°‡∫µ'}</td></tr>`;
        });
        tableHtml += '</tbody></table>';
        container.innerHTML = podiumHtml + tableHtml;
    }

    // Function to check status and decide what to render
    async function checkAndRender(sessionId, studentId) {
        const { data: sessionStatus, error } = await supabase_client
            .from('quiz_sessions')
            .select('status')
            .eq('id', sessionId)
            .single();

        if (sessionStatus && sessionStatus.status === 'CLOSED') {
            rankedSummaryContainer.style.display = 'block'; // ‡∫™‡∫∞‡ªÅ‡∫î‡∫á container
            startLogoutTimer(); // ‡ªÄ‡∫•‡∫µ‡ªà‡∫°‡∫ô‡∫±‡∫ö‡ªÄ‡∫ß‡∫•‡∫≤ 5 ‡∫ô‡∫≤‡∫ó‡∫µ
            renderRankingTable(sessionId, studentId);
        } else {
            rankedSummaryContainer.innerHTML = '<h2>‚è≥ ‡∫Å‡∫∞‡∫•‡∫∏‡∫ô‡∫≤‡∫•‡ªç‡∫ñ‡ªâ‡∫≤...</h2><p>‡∫à‡∫∞‡∫™‡∫∞‡ªÅ‡∫î‡∫á‡∫≠‡∫±‡∫ô‡∫î‡∫±‡∫ö‡∫•‡∫ß‡∫°‡∫´‡∫º‡∫±‡∫á‡∫à‡∫≤‡∫Å‡∫Å‡∫≤‡∫ô‡∫™‡∫≠‡∫ö‡ªÄ‡∫™‡∫±‡∫á‡∫™‡∫¥‡ªâ‡∫ô‡∫™‡∫∏‡∫î‡∫•‡∫ª‡∫á.</p>';
        }
    }

    if (latestSubmission && latestSubmission.session_id) {
        const sessionId = latestSubmission.session_id;
        // Initial check when page loads
        await checkAndRender(sessionId, studentId);

        // Subscribe to realtime updates for the session status
        const channel = supabase_client.channel(`public:quiz_sessions:id=eq.${sessionId}`)
            .on('postgres_changes', { event: 'UPDATE', schema: 'public', table: 'quiz_sessions', filter: `id=eq.${sessionId}` }, payload => {
                if (payload.new.status === 'CLOSED') {
                    // ‡∫Å‡∫ß‡∫î‡∫™‡∫≠‡∫ö‡∫Å‡ªà‡∫≠‡∫ô‡∫ß‡ªà‡∫≤‡ªÑ‡∫î‡ªâ‡ªÄ‡∫•‡∫µ‡ªà‡∫°‡∫ô‡∫±‡∫ö‡ªÄ‡∫ß‡∫•‡∫≤‡ªÅ‡∫•‡ªâ‡∫ß ‡∫´‡∫º‡∫∑ ‡∫ö‡ªç‡ªà
                    if (logoutTimerContainer.style.display !== 'block') {
                        Swal.fire({ icon: 'success', title: '‡∫Å‡∫≤‡∫ô‡∫™‡∫≠‡∫ö‡ªÄ‡∫™‡∫±‡∫á‡∫™‡∫¥‡ªâ‡∫ô‡∫™‡∫∏‡∫î‡ªÅ‡∫•‡ªâ‡∫ß!', text: '‡∫Å‡∫≥‡∫•‡∫±‡∫á‡∫™‡∫∞‡ªÅ‡∫î‡∫á‡∫ú‡∫ª‡∫ô‡∫Å‡∫≤‡∫ô‡∫à‡∫±‡∫î‡∫≠‡∫±‡∫ô‡∫î‡∫±‡∫ö...' });
                        rankedSummaryContainer.style.display = 'block'; // ‡∫™‡∫∞‡ªÅ‡∫î‡∫á container
                        startLogoutTimer(); // ‡ªÄ‡∫•‡∫µ‡ªà‡∫°‡∫ô‡∫±‡∫ö‡ªÄ‡∫ß‡∫•‡∫≤ 5 ‡∫ô‡∫≤‡∫ó‡∫µ
                        renderRankingTable(sessionId, studentId);
                    }
                }
            })
            .subscribe();
    }
});